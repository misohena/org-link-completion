#+TITLE: やりたいことリスト

* Inbox
** TODO Example Blockの検索方法が正しいか検証する
とりあえずorg-babel-src-block-regexpの_srcを_exampleに置換して間に合わせたが、それで大丈夫か確認する。
org-fontify-meta-lines-and-blocks-1でのやり方と一致していれば問題ないと思う。
後はorg-elementのやり方を見るとか。

** TODO plainリンクやangleリンクに対応するかどうか
** TODO テキストプロパティを見て解析を高速化することは出来る？
** TODO リンクの開始点を必ずしも正確に特定できない問題は解決できる？
左に戻りながら調べて最初に現れた[[で停止するようになっている。なので、descriptionの中に[[があったらそこがリンクの始まりだと誤認してしまう。それが嫌ならずいぶん前から解析をしなければならない(行頭からとも限らない。複数行に跨がるリンクは存在しうるから)。大人しくorg-elementを使った方が？　もちろんポイントのあるリンクは完成しているとは限らないので直接的には調べられない。

** TODO ソースコードブロックの中で反応しないようにする
ただしorg-modeのソースコードブロックは除く？？
** TODO coderefの)を補完する
そもそも一般的に補完候補を選択した後にそれ以上の文字列を追加するというのは良いのだろうか。ファイル名補完なんかではディレクトリの場合次の/まで候補に出している。
まぁ、)][まで入力して問題ないだろう。そうなると他も][が問題になる。

** TODO pathの補完終了時に][を挿入する
** TODO ]と[の間等で補完できるようにする
- |[[ => [[を補完する
- [|[ => [を補完する
- ]|[ => [を補完する
- ]|] => ]を補完する
- ]]| => 何もしない

** TODO htmlファイルのタイトルを補完する
** TODO httpやhttpsでタイトルを補完する
http、https経由でhtmlやorgファイルをダウンロードしてファイルと同じように解析する。
さすがにやり過ぎなのでデフォルトで無効にする？

** TODO idタイプを補完できるか検討する
** TODO fileの説明部分などで重複が発生しているのをどうするか
直す？　アノテーションを付けるなら重複していても仕方ないかもしれないけど。
** TODO coderefの補完範囲の終端は)までにすべきでは？
(1+ path-beg)(または(1+ option-beg))からpath-endまでとしているが、
)を含めるべきではないなら)があるときは一つ前にすべきでは？
[[*coderefの)を補完する][coderefの)を補完する]]をどうするかにもよる。
* Finished
** DONE 「#」で始まる内部リンクを補完する(customid)
CLOSED: [2024-02-24 Sat 13:30]
** DONE 「*」で始まる内部リンクを補完する(見出し)
CLOSED: [2024-02-24 Sat 13:30]
** DONE #や*以外の内部リンクを補完する
CLOSED: [2024-02-24 Sat 21:53]
次の順番で探すらしい。
1. dedicated target << と >> で囲まれた単語
2. 要素の名前 (#+NAME:)
3. 見出し(ただし[[elisp-variable:org-link-search-must-match-exact-headline]]の影響を受ける)
4. 全単語

見出しは「*」を使うべきなので補完しないことにする。全単語も論外。

# [[TODO #や*以外のページ内リンクを補完する]]
見出しを探す動作は今ひとつ分からない。
org-link-search-must-match-exact-headlineがデフォルトの'query-to-createだとジャンプはするのに新しい見出しを作るか聞いてくる。

リンクタイプの補完と被るのが困り処。
** DONE タイプが省略されたファイル名を補完する
CLOSED: [2024-02-24 Sat 13:34]
/ や ./ 、 ~/ c:/等 で始まるものはファイル名として補完する。
単にファイル名だけだと内部リンクになる。
** DONE 内部リンクの説明部分を補完する
CLOSED: [2024-02-24 Sat 22:45]
補完候補:
- リンクの文字列そのもの(*や#を取り除く)
- +段落のテキスト+
- その行のテキスト
- 見出し
** DONE あらゆるリンクの説明部分を他のリンクから推測する
CLOSED: [2024-02-25 Sun 01:47]
パス部分と一致する他のリンクを探して、その説明部分を補完候補にする。
** DONE あらゆるリンクのパス部分を他のリンクから推測する
CLOSED: [2024-02-25 Sun 01:47]
タイプ部分と一致する他のリンクを探して、そのパス部分を補完候補にする。
** DONE 関数名や変数名を整える
CLOSED: [2024-02-25 Sun 13:37]
- -capf-は意味が無いので取り除く
- 関数名の-defaultは取り除く
- 関数を入れる変数名に-functionを付ける
- 変数名の-functionsと-functionが似すぎているので-kind-functionsにする
** DONE Example Blockに対するcoderefが補完できないのを直す
CLOSED: [2024-02-25 Sun 23:26]
org-element-typeはexample-blockを受け入れてもorg-babel-src-block-regexpを使っているのだから当然。でもexample-blockを検索する正規表現そのものは見当たらない。org-fontify-meta-lines-and-blocks-1のやり方はちょっと面倒だしなぁ。
org-babel-src-block-regexpの_srcを_exampleに置換したらダメ？→とりあえずそうした。
** DONE カスタマイズグループが補完関数だらけで見づらいので何とかする
CLOSED: [2024-02-25 Sun 23:38]
補完関数だけを入れたサブグループを作る。
** DONE タイプの解析部分とタイプ無しファイルパスの判定部分を直す
CLOSED: [2024-02-26 Mon 19:14]

ドライブレターの扱いに問題がある。

[[elisp-function:org-element-link-parser]]を見ると絶対パス ~(file-name-absolute-p raw-link)~ または相対パス ./ または ../ のときファイルリンクだと判定している。つまり c: の後に / が無い場合は ./ でも ../ でもない相対パスなので、ファイルとして扱われない。

つまり[[d:data/]]や[[c:Users]]や[[c:./todo.org]]のようなものはEmacsはともかくorg-modeのファイルリンクとしては扱われない。一方で[[c:\home]]のように/では無く\でも問題ないことになる。

c:の後に/や\を許容するか、大人しく[[elisp-function:file-name-absolute-p]]を使用するか。

そもそも頭に. / ~ が付いているケースももっとちゃんと調べた方が良い。

大人しくorg-element.elを使いなさいってこった。[[elisp-function:org-element-link-parser]]は直接呼び出しても大丈夫なのかな？
まぁ、[[elisp-function:org-element-link-parser]]をよく読んで出来るだけ仕様に忠実にできたらそれに越したことはないし、こんな些細な所で違っていても別に問題はほとんどない。

~[[c:home]]~ と書いたらこれはcというリンクタイプになると思いきや内部リンクになる！　何で！？　……ああ、リンクタイプはorg-link-types-reとマッチしていなければならないのか。つまり登録されているリンクタイプ名しか許容されない。それ以外は内部リンクになる。でもこれの場合は未完成のリンクタイプを考慮しなければならない。とは言え、カーソルが:よりもずっと右にあったら許容する理由もない気がする。

まとめると
- [[elisp-function:org-link-completion-parse-at-point][org-link-completion-parse-at-point]] は 定義済みタイプのみタイプと認識すべき。
  (ただし、ポイントがタイプ部分にあるときは未完成のタイプとして許容すべき)
  これによって c: も必然的にタイプでは無くなる。
  ~[[unknowntype~ はこれまで通りtypeだが、 ~[[unknowntype:foobar~ の ~unknowntype:~ 部分はタイプではなく内部リンク(の一部)になる。カスタマイズ変数があっても良い。
- [[elisp-function:org-link-completion-untyped-link-kind]] は[[elisp-function:file-name-absolute-p][file-name-absolute-p]]を使うべき。
  ~ ~USERID ~USERID/* ~USERID\* ~/* ~\* /* \* c:/* c:\* だけがファイルパスになる。
** DONE parse-letのwhereにnilを指定しているところを出来るだけ無くす
CLOSED: [2024-02-26 Mon 22:33]
path-begやpath-endがnilの場所(つまりwhere=type)でpathを参照するとbuffer-substring-no-propertiesがエラーを出すはず。後からチェックできないので危険。

論理的に考えて、説明部分でしか使わないはず。
pathから得られる情報を使ってpathやtypeを書き替えるわけがない。

ただ一つ例外は[[elisp-function:org-link-completion-collect-path-from-other-links]]。これはtypeによってpathを補完するから。typeは必ず存在するので問題なし。
** DONE ファイル名の説明部分を補完する
CLOSED: [2024-02-26 Mon 22:40]
補完候補:
- orgファイルの場合はTITLE
- ファイル名だけ
- 拡張子を除いたベース名だけ
- 絶対パス
- +htmlファイルの場合はtitle要素+ これはまた後で。
** DONE 空文字列の候補を出すところをいくつか直す
CLOSED: [2024-02-26 Mon 22:50]
- org-link-completion-collect-description-from-other-links (他のdescription)
- org-link-completion-collect-stripped-internal-link-path (記号を取り除いたパス)
- org-link-completion-collect-path (パスそのもの)
- org-link-completion-get-heading (見出し)
** DONE 空文字列の候補を出すところがあるかもしれないのでチェックする
CLOSED: [2024-02-26 Mon 23:47]
いくつか直したがまだ残っているかも。
** DONE fileの説明部分の補完などでアノテーションを付ける
CLOSED: [2024-02-27 Tue 01:39]
どこから持ってきたテキストなのか分かりづらい。
** DONE 同じ見出しが何度も収集されてしまう問題を修正する
CLOSED: [2024-02-27 Tue 10:39]
org-outline-regexpは行頭に限定されていない！
** DONE fileタイプで::以降の記法を補完する
CLOSED: [2024-02-27 Tue 10:38]
[[https://orgmode.org/manual/Search-Options.html][Search Options (The Org Manual)]]
- ::NNN
- ::My Target
- ::*headline
- ::#custom-id
- ::/regexp/

空のファイル名は現在のファイルを検索する。[[file:::fileタイプで]] [[fileタイプで]] どちらでも良い。
